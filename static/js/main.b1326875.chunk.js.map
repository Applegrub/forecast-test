{"version":3,"sources":["components/InfoDialog.js","components/CityForecast.js","components/GetterForecast.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","div","Info","WeatherContent","Weather","img","InfoDialog","props","onClose","open","cityInfo","main","Dialog","DialogContent","toCelsius","temp_min","temp_max","feels_like","src","weather","icon","alt","description","wind","speed","useStyles","makeStyles","theme","root","width","maxWidth","degris","toFixed","CityForecast","classes","useState","setOpen","temp","className","ListItem","button","variant","onClick","ListItemText","primary","name","secondary","value","Root","GetterForecast","city","isLoaded","setIsLoaded","data","setData","useEffect","a","axios","get","then","catch","e","console","error","fetchData","citys","App","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"msBAMA,IAAMA,EAAQC,IAAOC,IAAV,KAKLC,EAAOF,IAAOC,IAAV,KAOJE,EAAiBH,IAAOC,IAAV,KAIdG,EAAUJ,IAAOK,IAAV,KA+BEC,MA7Bf,SAAoBC,GAAQ,IAEjBC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,SAMhBC,EAAOD,EAASC,KACtB,OACI,kBAACC,EAAA,EAAD,CAAQJ,QANQ,WAChBA,EAAQC,IAKsBA,KAAMA,GAChC,kBAACV,EAAD,2BACA,kBAACc,EAAA,EAAD,KACI,kBAACX,EAAD,KACI,iDAAuBY,EAAUH,EAAKI,UAAtC,UACA,iDAAuBD,EAAUH,EAAKK,UAAtC,UACA,kDAAwBF,EAAUH,EAAKM,YAAvC,UACA,kBAACd,EAAD,KACI,kBAACC,EAAD,CAASc,IAAG,4CAAuCR,EAASS,QAAQ,GAAGC,KAA3D,WACHC,IAAKX,EAASS,QAAQ,GAAGR,OAClC,iCAAOD,EAASS,QAAQ,GAAGG,cAE/B,uCAAaZ,EAASa,KAAKC,MAA3B,YCvCdC,EAAYC,KAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,MAAO,OACPC,SAAU,SA8BX,IAAMhB,EAAY,SAACiB,GAEtB,OADeA,EAAS,KACVC,QAAQ,IAGXC,EA9Bf,SAAsB1B,GAClB,IAAM2B,EAAUT,IACTf,EAAYH,EAAZG,SAFkB,EAGDyB,oBAAS,GAHR,mBAGlB1B,EAHkB,KAGZ2B,EAHY,KAanBC,EAAO3B,EAASC,KAAK0B,KAC3B,OAAO,yBAAKC,UAAWJ,EAAQN,MAC3B,kBAACW,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAQ,WAAWC,QANxC,WACIN,GAAQ,KAMJ,kBAACO,EAAA,EAAD,CACIC,QAASlC,EAASmC,KAClBC,UAAS,6BAAwBhC,EAAUuB,GAAlC,aAGjB,kBAAC,EAAD,CAAY5B,KAAMA,EAAMD,QAhBR,SAACuC,GACjBX,GAAQ,IAesC1B,SAAUA,M,wHC/BhE,IAAMsC,EAAOhD,IAAOC,IAAV,KAgCKgD,MA3Bf,SAAwB1C,GAAQ,IACrB2C,EAAQ3C,EAAR2C,KADoB,EAEKf,oBAAS,GAFd,mBAEpBgB,EAFoB,KAEVC,EAFU,OAGHjB,mBAAS,IAHN,mBAGpBkB,EAHoB,KAGdC,EAHc,KAkB3B,OAbAC,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEACUC,IAAMC,IAAN,4DAA+DR,EAA/D,4CACDS,MAAK,YAAa,IAAXN,EAAU,EAAVA,KACJC,EAAQD,GACRD,GAAY,MAEfQ,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,MANlC,4CADY,uBAAC,WAAD,wBASZG,KAED,IAEEb,EAIG,kBAAC,EAAD,CAAczC,SAAU2C,IAHrB,kBAACL,EAAD,6D,4kBCzBf,IAAMA,EAAOhD,IAAOC,IAAV,KA6BJgE,EAAQ,CAAC,SAAU,SAAU,YAQpBC,MANf,WACI,OAAO,kBAAC,EAAD,KACFD,EAAME,KAAI,SAACjB,GAAD,OAAU,kBAAC,EAAD,CAAgBkB,IAAKlB,EAAMA,KAAMA,SCzB1CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoB,a","file":"static/js/main.b1326875.chunk.js","sourcesContent":["import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport styled from \"@emotion/styled\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {toCelsius} from \"./CityForecast\"\n\nconst Title = styled.div`\npadding: 16px 24px;\ntext-align: center;\nfont-size: 30px;\n`\nconst Info = styled.div`\nfont-size: 20px;\npadding: -5px;\n&>*{\npadding: 5px;\n}\n`\nconst WeatherContent = styled.div`\ndisplay: flex;\nalign-items: center;\n`\nconst Weather = styled.img``\n\nfunction InfoDialog(props) {\n\n    const {onClose, open, cityInfo} = props;\n\n    const handleClose = () => {\n        onClose(open);\n    };\n\n    const main = cityInfo.main\n    return (\n        <Dialog onClose={handleClose} open={open}>\n            <Title>More about weather</Title>\n            <DialogContent>\n                <Info>\n                    <div>Temperature min: {toCelsius(main.temp_min)} °C</div>\n                    <div>Temperature max: {toCelsius(main.temp_max)} °C</div>\n                    <div>And it feels like {toCelsius(main.feels_like)} °C</div>\n                    <WeatherContent>\n                        <Weather src={`https://openweathermap.org/img/wn/${cityInfo.weather[0].icon}@2x.png`}\n                                 alt={cityInfo.weather[0].main}/>\n                        <div> {cityInfo.weather[0].description}</div>\n                    </WeatherContent>\n                    <div> Wind: {cityInfo.wind.speed} m/s</div>\n                </Info>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nexport default InfoDialog;","import React, {useState} from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InfoDialog from \"./InfoDialog\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 400,\n    },\n}));\n\n\nfunction CityForecast(props) {\n    const classes = useStyles();\n    const {cityInfo} = props\n    const [open, setOpen] = useState(false);\n\n    const handleClose = (value) => {\n        setOpen(false);\n    };\n\n    function handleClickOpen() {\n        setOpen(true);\n    }\n\n    const temp = cityInfo.main.temp;\n    return <div className={classes.root}>\n        <ListItem button variant=\"outlined\" onClick={handleClickOpen}>\n            <ListItemText\n                primary={cityInfo.name}\n                secondary={`Temperature today: ${toCelsius(temp)} °C`}\n            />\n        </ListItem>\n        <InfoDialog open={open} onClose={handleClose} cityInfo={cityInfo}/>\n    </div>\n}\n\nexport const toCelsius = (degris) => {\n    const result = degris - 273;\n    return result.toFixed(0);\n}\n\nexport default CityForecast;","import React, {useEffect, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport CityForecast from \"./CityForecast\";\nimport axios from \"axios\";\n\nconst Root = styled.div`\ncolor: white;\nfont-size: 3vh;\n`\n\nfunction GetterForecast(props) {\n    const {city} = props\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        async function fetchData() {\n            await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=12048a468d7808777fe096886d9beb48`)\n                .then(({data}) => {\n                    setData(data);\n                    setIsLoaded(true);\n                })\n                .catch(e => console.error(e))\n        }\n        fetchData()\n        //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (!isLoaded) {\n        return <Root>Загрузка...</Root>;\n    } else {\n        return (\n            <CityForecast cityInfo={data}/>\n        );\n    }\n}\n\nexport default GetterForecast;","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport GetterForecast from \"./components/GetterForecast\";\n\nconst Root = styled.div`\nheight: 100vh;\nwidth: 100vw;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nbackground: linear-gradient(149.94deg, #CDF0FF 9.2%, \nrgba(186, 223, 244, 0.98991) 21.69%, \nrgba(56, 102, 169, 0.92) 63.84%, #2E5DA4 83.89%, #2E5DA4 91.59%);\n\nmargin: -5px;\n&>*{\nmargin: 5px;\n}\n\n.makeStyles-root-1{\nborder-radius: 10px;\nbackground: white;\n}\n.MuiListItemText-primary{\ncolor: black;\nfont-size: 25px;\n}\n.MuiListItemText-secondary{\ncolor: black;\nfont-size: 20px;\n}\n`\nconst citys = ['London', 'Moscow', 'Canberra']\n\nfunction App() {\n    return <Root>\n        {citys.map((city) => <GetterForecast key={city} city={city}/>)}\n    </Root>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}