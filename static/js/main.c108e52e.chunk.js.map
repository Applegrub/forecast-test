{"version":3,"sources":["stores/DialogStore.js","contexts/index.js","stores/RootStore.js","hooks/use-stores.js","components/OneDayForecast.js","components/InfoDialog.js","components/CityForecast.js","components/GetterForecast.js","App.js","serviceWorker.js","index.js"],"names":["DialogStore","this","open","info","daily","dt","temp","weather","main","description","icon","props","decorate","observable","isOpen","computed","closeDialog","action","openDialog","mobXStore","initState","serialize","dialogStore","storesContext","React","createContext","useStores","useContext","Root","styled","div","WeatherContent","Weather","img","OneDayForecast","timestamp","day","Date","toLocaleDateString","toCelsius","src","alt","Title","Info","InfoDialog","handleClose","getinfo","useObserver","Dialog","onClose","DialogContent","useStyles","makeStyles","theme","root","width","degris","toFixed","CityForecast","cityInfo","dataThreeDays","classes","handleClickOpen","addInfo","className","ListItem","button","variant","onClick","ListItemText","primary","name","secondary","map","Map","GetterForecast","city","useState","isLoaded","setIsLoaded","data","setData","setDataThreeDays","coords","get","oneDayAPI","threeDayAPI","useEffect","a","axios","then","catch","e","console","error","fetchData","citys","App","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c108e52e.chunk.js","sourcesContent":["import {action, computed, observable, decorate} from \"mobx\";\n\n\nexport default class DialogStore {\n    constructor() {\n        this.open = false;\n        this.info = {\n            daily: [{}, {dt: '', temp: 0, weather: [{main: \"\", description: \"\", icon: \"\"}]},\n                {dt: '', temp: 0, weather: [{main: \"\", description: \"\", icon: \"\"}]},\n                {dt: '', temp: 0, weather: [{main: \"\", description: \"\", icon: \"\"}]}]\n        }\n    }\n\n    get isOpen() {\n        return this.open\n    }\n\n    get getinfo() {\n        return this.info\n    }\n\n    addInfo(props) {\n        this.info = props\n    }\n\n    closeDialog() {\n        this.open = false;\n    }\n\n    openDialog() {\n        this.open = true;\n    }\n}\ndecorate(DialogStore, {\n    open: observable,\n    isOpen: computed,\n    closeDialog: action,\n    openDialog: action,\n})\n\nexport const dialogStore = new DialogStore()\n\n","import {RootStore} from \"../stores/RootStore\";\nimport React from \"react\";\n\nexport const mobXStore = new RootStore(null)\n\nexport const storesContext = React.createContext({\n    ...mobXStore\n})","import DialogStore from \"./DialogStore\";\n\nexport class RootStore {\n\n\n    constructor(initState) {\n        this.dialogStore = new DialogStore(\n            this,\n            initState && initState.dialogStore ? initState.dialogStore : null\n        );\n    }\n     serialize = () => ({\n         dialogStore: {}\n    });\n}","import React from 'react';\nimport { storesContext } from '../contexts';\n\nexport const useStores = () => React.useContext(storesContext);","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {toCelsius} from \"./CityForecast\";\n\n\nconst Root = styled.div`\nfont-size: 20px;\n@media screen and (max-width: 600px){\nfont-size: 15px;\n}\nmargin: 5px 0;\npadding: -5px;\n&>*{\npadding: 5px;\n}\n`\nconst WeatherContent = styled.div`\ndisplay: flex;\nalign-items: center;\n`\nconst Weather = styled.img``\n\nconst OneDayForecast = (props) => {\n    const {day} = props;\n    const date = (timestamp) => new Date(timestamp * 1000).toLocaleDateString();\n    return <Root>\n        <div>Date: {date(day.dt)}</div>\n        <div>Temperature: {toCelsius(day.temp.day)} °C</div>\n        <WeatherContent>\n            <Weather src={`https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n                     alt={day.weather[0].main}/>\n            <div> {day.weather[0].description}</div>\n        </WeatherContent>\n    </Root>\n}\nexport default OneDayForecast;","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport styled from \"@emotion/styled\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {useObserver} from 'mobx-react'\nimport {useStores} from \"../hooks/use-stores\";\nimport OneDayForecast from \"./OneDayForecast\";\n\nconst Title = styled.div`\npadding: 16px 24px;\ntext-align: center;\nfont-size: 30px;\n@media screen and (max-width: 600px){\nfont-size: 20px;\n}\n`\nconst Info = styled.div`\n`\n\n\nconst InfoDialog = () => {\n    const {dialogStore} = useStores()\n    const handleClose = () => {\n        dialogStore.closeDialog()\n    };\n    const info = dialogStore.getinfo\n\n    return useObserver(() => (<Dialog onClose={handleClose} open={dialogStore.isOpen}>\n            <Title>More about weather</Title>\n            <DialogContent>\n                <Info>\n                    <OneDayForecast day={info.daily[1]}/>\n                    <OneDayForecast day={info.daily[2]}/>\n                    <OneDayForecast day={info.daily[3]}/>\n                </Info>\n            </DialogContent>\n        </Dialog>\n    ));\n}\n\nexport default InfoDialog;","import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {useObserver} from 'mobx-react'\nimport {useStores} from \"../hooks/use-stores\";\nimport InfoDialog from \"./InfoDialog\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n}));\n\nconst CityForecast = (props) => {\n    const {cityInfo, dataThreeDays} = props\n    const classes = useStyles();\n    const {dialogStore} = useStores()\n\n    function handleClickOpen() {\n        dialogStore.openDialog()\n        dialogStore.addInfo(dataThreeDays)\n    }\n\n    const temp = cityInfo.main.temp;\n    return useObserver(() => (<div className={classes.root}>\n        <ListItem button variant=\"outlined\" onClick={handleClickOpen}>\n            <ListItemText\n                primary={cityInfo.name}\n                secondary={`Temperature today: ${toCelsius(temp)} °C`}\n            />\n        </ListItem>\n        <InfoDialog/>\n    </div>))\n};\n\nexport const toCelsius = (degris) => {\n    const result = degris - 273;\n    return result.toFixed(0);\n}\n\nexport default CityForecast;","import React, {useEffect, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport CityForecast from \"./CityForecast\";\nimport axios from \"axios\";\n\nconst Root = styled.div`\npadding: 5px;\ncolor: black;\nfont-size: 3vh;\n`\n\nconst map = new Map([\n    ['London', [-0.13, 51.51]],\n    ['Moscow', [37.618423, 55.751244]],\n    ['Wien', [16.37, 48.21]]])\n\nfunction GetterForecast(props) {\n    const {city} = props\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [data, setData] = useState({});\n    const [dataThreeDays, setDataThreeDays] = useState({});\n\n    const coords = map.get(city)\n    const oneDayAPI = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=12048a468d7808777fe096886d9beb48`;\n    const threeDayAPI = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords[1]}&lon=${coords[0]}&exclude=hourly&appid=3238ccb17a8a11abd9f0a08c8f575a8f`;\n    useEffect(() => {\n        async function fetchData() {\n            await axios.get(oneDayAPI)\n                .then(({data}) => {\n                    setData(data);\n                    setIsLoaded(true);\n                })\n                .catch(e => console.error(e))\n            await axios.get(threeDayAPI)\n                .then(({data}) => {\n                    setDataThreeDays(data);\n                    setIsLoaded(true);\n                })\n                .catch(e => console.error(e))\n        }\n        fetchData()\n        //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (!isLoaded) {\n        return <Root>Загрузка...</Root>;\n    } else {\n        return (<CityForecast cityInfo={data} dataThreeDays={dataThreeDays}/>)\n    }\n}\n\nexport default GetterForecast;","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport GetterForecast from \"./components/GetterForecast\";\n\nconst Root = styled.div`\nheight: 100vh;\nwidth: 100vw;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nbackground: linear-gradient(149.94deg, #CDF0FF 9.2%, \nrgba(186, 223, 244, 0.98991) 21.69%, \nrgba(56, 102, 169, 0.92) 63.84%, #2E5DA4 83.89%, #2E5DA4 91.59%);\n\n&>*{\nmargin: 5px;\nmax-width: 400px;\n@media screen and (max-width: 600px){\nmax-width: 300px;\n}\nborder-radius: 10px;\nbackground: white;\n}\n\n.MuiListItemText-primary{\ncolor: black;\nfont-size: 25px;\n}\n.MuiListItemText-secondary{\ncolor: black;\nfont-size: 20px;\n}\n`\nconst citys = ['London', 'Moscow', 'Wien']\n\nfunction App() {\n    return <Root>\n        {citys.map((city) => <GetterForecast key={city} city={city} />)}\n    </Root>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {mobXStore} from \"./contexts\";\n\n\nReactDOM.render(<Provider {...mobXStore}>\n            <App/>\n        </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}