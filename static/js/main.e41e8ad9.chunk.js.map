{"version":3,"sources":["serviceWorker.js","components/OneDayForecast.js","components/InfoDialog.js","apolloComponents/ApolloCityForecast.js","apolloComponents/ApolloGetterForecast.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Root","styled","div","WeatherContent","Weather","img","OneDayForecast","props","timestamp","day","dt","Date","toLocaleDateString","toCelsius","temp","src","weather","icon","alt","main","description","Title","InfoDialog","infoForDialog","open","onClose","info","threeDays","Dialog","DialogContent","daily","degris","toFixed","ApolloCityForecast","cityInfo","useState","setOpen","oneDay","ListItem","button","variant","onClick","ListItemText","primary","response","name","secondary","Query","gql","ApolloGetter","loading","error","data","message","map","Map","ApolloGetterForecast","city","coords","get","restLink","RestLink","endpoints","v1","v2","client","ApolloClient","link","cache","InMemoryCache","Wrapper","graphql","console","log","citys","ApolloApp","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e41e8ad9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {toCelsius} from \"../apolloComponents/ApolloCityForecast\";\n\n\n\nconst Root = styled.div`\nfont-size: 20px;\n@media screen and (max-width: 600px){\nfont-size: 15px;\n}\nmargin: 5px 0;\npadding: -5px;\n&>*{\npadding: 5px;\n}\n`\nconst WeatherContent = styled.div`\ndisplay: flex;\nalign-items: center;\n`\nconst Weather = styled.img``\n\nconst OneDayForecast = (props) => {\n    const {day} = props;\n    const date = (timestamp) => new Date(timestamp * 1000).toLocaleDateString();\n    return <Root>\n        <div>Date: {date(day.dt)}</div>\n        <div>Temperature: {toCelsius(day.temp.day)} Â°C</div>\n        <WeatherContent>\n            <Weather src={`https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n                     alt={day.weather[0].main}/>\n            <div> {day.weather[0].description}</div>\n        </WeatherContent>\n    </Root>\n}\nexport default OneDayForecast;","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport styled from \"@emotion/styled\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport OneDayForecast from \"./OneDayForecast\";\n\nconst Title = styled.div`\npadding: 16px 24px;\ntext-align: center;\nfont-size: 30px;\n@media screen and (max-width: 600px){\nfont-size: 20px;\n}\n`\n\n\nconst InfoDialog = ({infoForDialog, open, onClose}) => {\n\n    const info = infoForDialog.threeDays\n\n    return <Dialog onClose={onClose} open={open}>\n            <Title>More about weather</Title>\n            <DialogContent>\n                <div>\n                    <OneDayForecast day={info.daily[1]}/>\n                    <OneDayForecast day={info.daily[2]}/>\n                    <OneDayForecast day={info.daily[3]}/>\n                </div>\n            </DialogContent>\n        </Dialog>\n}\n\nexport default InfoDialog;","import React, {useState} from \"react\";\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InfoDialog from \"../components/InfoDialog\";\n\n\n\nconst ApolloCityForecast = (props) => {\n    const {cityInfo} = props\n\n    const [open, setOpen] = useState(false)\n\n    const temp = cityInfo.oneDay?.main.temp;\n    return <div>\n        <ListItem button variant=\"outlined\" onClick={()=>setOpen(true)}>\n            <ListItemText\n                primary={cityInfo.response?.name}\n                secondary={`Temperature today: ${toCelsius(temp)} Â°C`}\n            />\n        </ListItem>\n        <InfoDialog infoForDialog={cityInfo} open={open} onClose={()=>setOpen(false)}/>\n    </div>\n};\n\nexport const toCelsius = (degris) => {\n    const result = degris - 273;\n    return result.toFixed(0);\n}\n\nexport default ApolloCityForecast;","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {ApolloProvider, graphql} from \"react-apollo\";\nimport gql from 'graphql-tag';\nimport ApolloCityForecast from \"./ApolloCityForecast\";\nimport {RestLink} from \"apollo-link-rest\";\nimport {ApolloClient} from \"apollo-client\";\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\n\n\nconst Root = styled.div`\npadding: 5px;\ncolor: black;\nfont-size: 3vh;\n`\n\nconst Query = gql`\n    query {\n        oneDay @rest(type: String, path: \"\", endpoint: \"v1\"){\n            name\n            coord\n            weather\n            main\n            dt\n        }\n        threeDays @rest(type: String, path: \"\", endpoint: \"v2\"){\n            daily\n        }\n    }\n`;\n\nconst ApolloGetter = (props) => {\n    const {loading, error, data} = props\n\n    if (loading) return <Root>ÐÐ°Ð³ÑÑÐ·ÐºÐ°...</Root>;\n    if (error) return <Root>{error.message}</Root>;\n\n    return (<ApolloCityForecast cityInfo={data}/> )\n}\n\nconst map = new Map([\n    ['London', [-0.13, 51.51]],\n    ['Moscow', [37.618423, 55.751244]],\n    ['Vienna', [16.37, 48.21]]])\n\n\nconst ApolloGetterForecast = ({city}) => {\n    const coords = map.get(city)\n    const restLink = new RestLink({\n        endpoints: {v1: `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=12048a468d7808777fe096886d9beb48`,\n            v2: `https://api.openweathermap.org/data/2.5/onecall?lat=${coords[1]}&lon=${coords[0]}&exclude=hourly&appid=3238ccb17a8a11abd9f0a08c8f575a8f`}\n    });\n\n    const client = new ApolloClient({\n        link: restLink,\n        cache: new InMemoryCache(),\n    });\n\n    const Wrapper = graphql(Query, {\n        props: ({data}) => {\n            if (data.loading) return {loading: data.loading,};\n            if (data.error) return {error: data.error,};\n\n            console.log(data)\n\n            return {data: data, loading: false,};\n        },\n    })(ApolloGetter);\n\n    return (<ApolloProvider client={client}>\n        <Wrapper/>\n    </ApolloProvider>)\n}\n\nexport default ApolloGetterForecast\n\n//Get more response, than request. wtf?!\n// const Wrapper = ({city}) =>{\n//\n//     const Query = gql`\n//         query($city: String!) {\n//             response(city: $city) @rest(type: String, path: \"${city}&appid=12048a468d7808777fe096886d9beb48\", endpoint: \"v1\"){\n//                 name\n//                 coord\n//                 weather\n//                 main\n//                 dt\n//             }\n//         }\n//     `;\n//\n//     const ApolloGetter = (props) => {\n//         const {loading, error, data} = props\n//\n//         if (loading) return <Root>ÐÐ°Ð³ÑÑÐ·ÐºÐ°...</Root>;\n//         if (error) return <Root>{error.message}</Root>;\n//\n//         return (<ApolloCityForecast cityInfo={data}/>)\n//     }\n//\n//     const ApolloGetterForecast = graphql(Query, {\n//         props: ({ data }) => {\n//             if (data.loading) return {loading: data.loading,};\n//             if (data.error) return {error: data.error,};\n//\n//             console.log(data)\n//\n//             return {data: data, loading: false,};\n//         },\n//     })(ApolloGetter);\n//     return <ApolloGetterForecast/>\n// }","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport ApolloGetterForecast from \"./apolloComponents/ApolloGetterForecast\";\n\n\n\nconst citys = [\"London\", \"Vienna\",\"Moscow\"]\n\nconst ApolloApp = () => (\n        <Root>\n            {citys.map(city=><ApolloGetterForecast key={city} city={city}/>) }\n        </Root>\n);\n\nexport default ApolloApp;\n\n\nconst Root = styled.div`\nheight: 100vh;\nwidth: 100vw;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nbackground: linear-gradient(149.94deg, #CDF0FF 9.2%, \nrgba(186, 223, 244, 0.98991) 21.69%, \nrgba(56, 102, 169, 0.92) 63.84%, #2E5DA4 83.89%, #2E5DA4 91.59%);\n\n&>*{\nmargin: 5px;\nmax-width: 400px;\n@media screen and (max-width: 600px){\nmax-width: 300px;\n}\nborder-radius: 10px;\nbackground: white;\n}\n\n.MuiListItemText-primary{\ncolor: black;\nfont-size: 25px;\n}\n.MuiListItemText-secondary{\ncolor: black;\nfont-size: 20px;\n}\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloApp from \"./App\";\n\n\n\nReactDOM.render(<ApolloApp/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}